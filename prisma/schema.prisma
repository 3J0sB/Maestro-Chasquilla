// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SERVICE_PROVIDER
}

model User {
  id             String    @id @default(cuid())
  name           String?
  lastName       String?
  lastName2      String?
  rut            String?   @unique
  email          String    @unique
  emailVerified  DateTime? @map("email_verified")
  image          String?
  hashedPassword String?   @map("hashed_password")
  role           Role      @default(USER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime? @map("deleted_at")
  locationId     String?   @unique @map("location_id") 

  conversations           Conversation[]
  reviews                 reviews[]
  accounts                Account[]
  serviceRequest          ServiceRequest[]
  location                Location?                 @relation(fields: [locationId], references: [id])
  Messages                Messages[]                @relation("UserMessages")
  passwordResetTokens     PasswordResetToken[]
  // Nuevas relaciones para reportes
  providerReports         ServiceProviderReport[]   @relation("UserReports")
  serviceReports          ServiceReport[]           @relation("UserServiceReports")

  @@map("users")
}

model ServiceProviderUser {
  id               String    @id @default(cuid())
  name             String?
  lastName         String?
  lastName2        String?
  about            String?
  description      String?
  areasOfExpertise String?
  rut              String    @unique
  email            String    @unique
  emailVerified    DateTime? @map("email_verified")
  image            String?
  hashedPassword   String    @map("hashed_password")
  role             Role      @default(SERVICE_PROVIDER)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime? @map("deleted_at")
  locationId       String?   @unique @map("location_id")

  conversations       Conversation[]
  services            Services[]
  requests            ServiceRequest[]
  location            Location?                 @relation(fields: [locationId], references: [id])
  Messages            Messages[]                @relation("ProviderMessages")
  notifications       Notification[]
  passwordResetTokens PasswordResetToken[]
  // Nueva relación para reportes
  reports             ServiceProviderReport[]   @relation("ProviderReports")

  @@map("service_provider_users")
}

model Location {
  id        String    @id @default(cuid())
  country   String
  region    String
  city      String
  address   String
  latitude  Float
  longitude Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @map("deleted_at")

  serviceProvider ServiceProviderUser?
  user            User?

  @@map("locations")
}

model Services {
  id               String    @id @default(cuid())
  title            String
  price            Float?
  minServicePrice  Float?
  maxServicePrice  Float?
  smallDescription String?
  description      String?
  serviceTag       String?
  serviceTag2      String?
  serviceTag3      String?
  status           String?
  image            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime? @map("deleted_at")
  userId           String    @map("user_id")

  reviews        reviews[]
  user           ServiceProviderUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceRequest ServiceRequest[]
  // Nueva relación para reportes
  reports        ServiceReport[]     @relation("ServiceReports")

  @@map("services")
}

model reviews {
  id        String    @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @map("deleted_at")
  serviceId String    @map("service_id")
  userId    String    @map("user_id")

  service Services @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model ServiceRequest {
  id         String    @id @default(cuid())
  message    String
  status     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime? @map("deleted_at")
  providerId String    @map("provider_id")
  consumerId String    @map("consumer_id")
  serviceId  String    @map("service_id")

  service  Services            @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user     User                @relation(fields: [consumerId], references: [id], onDelete: Cascade)
  provider ServiceProviderUser @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@map("service_request")
}

model Categories {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @map("deleted_at")

  @@map("category")
}

model Conversation {
  id         String    @id @default(cuid())
  userId     String    @map("user_id")
  providerId String    @map("provider_id")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime? @map("deleted_at")

  messages Messages[]
  user     User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider ServiceProviderUser @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@map("conversations")
}

model Messages {
  id             String    @id @default(cuid())
  conversationId String    @map("conversation_id")
  senderId       String    @map("sender_id")
  senderType     String    @map("sender_type")
  content        String
  isRead         Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime? @map("deleted_at")
  providerId     String?   @map("provider_id")
  userId         String?   @map("user_id")

  conversation Conversation         @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  provider     ServiceProviderUser? @relation("ProviderMessages", fields: [providerId], references: [id])
  user         User?                @relation("UserMessages", fields: [userId], references: [id])

  @@map("messages")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Notification {
  id         String              @id @default(cuid())
  createdAt  DateTime            @default(now()) @map("created_at")
  readAt     DateTime?           @map("read_at")
  title      String
  message    String
  type       String 
  linkPath   String?             @map("link_path") 
  providerId String              @map("provider_id")
  provider   ServiceProviderUser @relation(fields: [providerId], references: [id], onDelete: Cascade)
  relatedId  String?             @map("related_id") 
  metadata   Json? 
  deletedAt  DateTime?           @map("deleted_at")

  @@index([providerId])
  @@index([type])
  @@map("notifications")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String?   @map("user_id")
  providerId String? @map("provider_id")
  userType  String   @map("user_type") 
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  used      Boolean  @default(false)
  

  user                User?                @relation(fields: [userId], references: [id], onDelete: Cascade, map: "password_reset_user_fk")
  serviceProviderUser ServiceProviderUser? @relation(fields: [providerId], references: [id], onDelete: Cascade, map: "password_reset_provider_fk")
  
  @@map("password_reset_tokens")
}

model ServiceProviderReport {
  id          String    @id @default(cuid())
  reason      String    
  description String?   
  status      String    @default("pending")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  resolvedAt  DateTime? @map("resolved_at")
  deletedAt   DateTime? @map("deleted_at")
  
  reporterId  String    @map("reporter_id") 
  providerId  String    @map("provider_id") 
  
  reporter User                @relation("UserReports", fields: [reporterId], references: [id], onDelete: Cascade)
  provider ServiceProviderUser @relation("ProviderReports", fields: [providerId], references: [id], onDelete: Cascade)
  
  @@index([providerId])
  @@index([reporterId])
  @@index([status])
  @@map("service_provider_reports")
}

model ServiceReport {
  id          String    @id @default(cuid())
  reason      String    
  description String?   
  status      String    @default("pending") 
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  resolvedAt  DateTime? @map("resolved_at")
  deletedAt   DateTime? @map("deleted_at")
  
  // Referencias
  reporterId String @map("reporter_id") 
  serviceId  String @map("service_id")  
  
 
  reporter User     @relation("UserServiceReports", fields: [reporterId], references: [id], onDelete: Cascade)
  service  Services @relation("ServiceReports", fields: [serviceId], references: [id], onDelete: Cascade)
  
  @@index([serviceId])
  @@index([reporterId])
  @@index([status])
  @@map("service_reports")
}