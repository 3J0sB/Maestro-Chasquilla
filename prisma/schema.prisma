// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SERVICE_PROVIDER
}

model User {
  id             String    @id @default(cuid())
  name           String?
  lastName       String?   
  lastName2      String?   
  rut            String?   @unique
  email          String    @unique
  emailVerified  DateTime? @map("email_verified")
  image          String?
  hashedPassword String?   @map("hashed_password")
  role           Role      @default(USER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime? @map("deleted_at")

  accounts Account[]
  serviceRequest ServiceRequest[]

  @@map("users")
}

model ServiceProviderUser {
  id             String    @id @default(cuid())
  name           String?
  lastName       String?   
  lastName2      String?   
  rut            String    @unique
  email          String    @unique
  emailVerified  DateTime? @map("email_verified")
  image          String?
  hashedPassword String    @map("hashed_password")
  role           Role      @default(SERVICE_PROVIDER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime? @map("deleted_at")

  services Services[]
  requests  ServiceRequest[]
  @@map("service_provider_users")
}

model Services {
  id              String    @id @default(cuid())
  title           String
  price           Float?
  minServicePrice Float?
  maxServicePrice Float?
  description     String?
  serviceTag      String?
  serviceTag2     String?
  serviceTag3     String?
  status          String?
  image           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime? @map("deleted_at")
  userId          String    @map("user_id")

  user           ServiceProviderUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceRequest ServiceRequest[]

  @@map("services")
}

model ServiceRequest {
  id         String    @id @default(cuid())
  message    String
  status     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime? @map("deleted_at")
  providerId String   @map("provider_id")
  consumerId String    @map("consumer_id")
  serviceId  String    @map("service_id")

  service Services @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [consumerId], references: [id], onDelete: Cascade)
  provider ServiceProviderUser @relation(fields: [providerId], references: [id], onDelete: Cascade)
  @@map("service_request")
}



model Categories{
  id        String    @id @default(cuid())
  name       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime? @map("deleted_at")

  @@map("category")
}
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
